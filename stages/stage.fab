///////////////////////////////////////////////////////////////////////////////
// Fabioware Interface:
///////////////////////////////////////////////////////////////////////////////

// Returns the current difficulty level.
// This levels up after beating a few floors.
fn difficulty() U
    return _difficulty

// Difficulty levels:
ct Int EASY   = 0
ct Int MEDIUM = 1
ct Int HARD   = 2

// Returns how many frames are left before the microgame ends.
fn frames_left() U
    return _frames_left

// How long each microgame lasts:
ct Int MICROGAME_FRAMES = 180

// Returns how many lives are left:
fn lives() U
    return _lives

// Returns how many microgames have been beaten:
fn floor() U
    return _floor

// Returns how many times the 'level up' display has shown:
fn level() U
    return _floor

///////////////////////////////////////////////////////////////////////////////

// A microgame is defined by the following struct: 
struct Microgame
    Fn.microgame_entry_point entry_point
    CCC/instructions instructions
    U instructions_num

vars
    Bool paused = false

vars /stage
    // Microgames should set this to determine if they were completed.
    U winning = false

    // stage state:
    U _difficulty = EASY
    U _lives = 3
    U _floor = 1
    U _level = 0
    U _frames_left

    U stage_state

    U stage_instructions_index = 0

    CCC/palettes stage_palette
    Fn.stage_update stage_update_fn
    Fn.stage_nmi stage_nmi_fn

    U[8] _prev_microgames = U[8]($FF)
    U _prev_microgames_i = 0

    // Used when pausing to preserve the palette:
    U[25] _palette_copy

vars /stage_transient
    // These are used to upload direction strings to the PPU:
    UU _upload_string_ppuaddr = 0
    CCC/strings _upload_string

    // If the instructions should be shown, and how tall:
    U stage_instructions_height = 0

    UF stage_state_progress // Tracks how close we are to the next state.
    U stage_ppuctrl = PPUCTRL_NMI_ON

    U _microgame
    
nmi _nmi()
    if(_upload_string_ppuaddr)
        // We'll upload strings to the first NT bank:
        state(GTROM_CHR_BANK)
        ppu_reset_addr(_upload_string_ppuaddr)
        for U i = 0; _upload_string[i] != charmap.sentinel; i += 1
            {PPUDATA}(_upload_string[i])

        if _upload_string_ppuaddr & $800
            _upload_string_ppuaddr = 0
        else
            _upload_string_ppuaddr |= $800
    else
        ppu_upload_palette()

    ppu_upload_oam_poll_pads(0)
    if paused
        paused_nmi()
    else
        stage_nmi_fn()
        
        if stage_instructions_height == $80
            {PPUCTRL}(PPUCTRL_NMI_ON | PPUCTRL_BG_PT_1000)
            state(GTROM_CHR_BANK)
            {PPUMASK}(PPUMASK_BG_ON | PPUMASK_NO_CLIP)
        else if stage_instructions_height 
            {PPUCTRL}(stage_ppuctrl)
            {PPUMASK}(PPUMASK_ON | PPUMASK_NO_CLIP)
            state(GTROM_CHR_BANK | GTROM_NT_BANK)
            ppu_await_status(PPUSTATUS_SPR_0)
            {PPUCTRL}(PPUCTRL_NMI_ON | PPUCTRL_BG_PT_1000)
            state(GTROM_CHR_BANK)
            {PPUMASK}(PPUMASK_BG_ON | PPUMASK_NO_CLIP)
            ppu_await_status_set(PPUSTATUS_SPR_OVERFLOW)
            state(GTROM_CHR_BANK | GTROM_NT_BANK)
            {PPUCTRL}(stage_ppuctrl)
            {PPUMASK}(PPUMASK_ON | PPUMASK_NO_CLIP)
        else
            {PPUCTRL}(stage_ppuctrl)
            {PPUMASK}(PPUMASK_ON | PPUMASK_NO_CLIP)
            state(GTROM_CHR_BANK | GTROM_NT_BANK)

    puf.process(PUF_DEFAULT)


// Stage states:
ct U STST_START         = 0
ct U STST_GAME_OVER     = 1
ct U STST_SUCCESS       = 2
ct U STST_FAILURE       = 3
ct U STST_DISPLAY_FLOOR = 4
ct U STST_LEVEL_UP      = 5
ct U STST_INSTRUCTIONS  = 6
ct U NUM_STST           = 7

mode stage_screen(U new_state)
: nmi _nmi
    {PPUCTRL}(0)
    {PPUMASK}(0)
    state(GTROM_CHR_BANK)

    stage_state = new_state

    // Blank the nametables where the text will appear:
    ppu_reset_addr($2000)
    ppu_upload_fill($00, 1024)
    ppu_reset_addr($2800)
    ppu_upload_fill($00, 1024)

    // Choose the next microgame and load its instructions:
    _select_microgame()
    _load_instructions(_microgame)

    // Fade in:
    state(GTROM_CHR_BANK | GTROM_NT_BANK)
    {PPUCTRL}(stage_ppuctrl)
    fade_in_black(FADE_PERIOD, stage_palette)

    // Run the state machine:
    while true
        _stage_state_machine()

ct U[NUM_STST] _frame_times = U[NUM_STST](
    256 / 128, // START
    256 / 256, // GAME OVER
    256 / 64,  // SUCCESS
    256 / 64,  // FAILURE
    256 / 64,  // NEXT FLOOR
    256 / 64,  // LEVEL UP
    256 / 64)  // instructions

ct UF[4] _difficulty_speed = UF[4](1, 1.25, 1.5, 2.0)

fn _stage_state_machine()
    // Initial setup:
    switch stage_state
        case STST_FAILURE
            _lives -= 1
            break
        case STST_INSTRUCTIONS
            stage_instructions_height = 1
            break

    UF increment = UF(_frame_times[stage_state] * _difficulty_speed[_difficulty])
    stage_state_progress = 0.0

    while true
        nmi
        update_pads()
        _handle_paused()

        if !paused
            stage_update_fn()

            switch stage_state
                case STST_GAME_OVER
                    // Allow quitting game over screen early:
                    if stage_state_progress > 64 && pads[0].pressed & BUTTON_START
                        goto done_waiting
                    break
                case STST_INSTRUCTIONS
                    // Handle instructions growing:
                    stage_instructions_height += 1
                    stage_instructions_height *= 1.5
                    if stage_instructions_height > 100
                        stage_instructions_height = $80
                    break

            if stage_state_progress += increment
                break

    label done_waiting
    
    // Determine what to do next:
    switch stage_state
        case STST_START
            stage_state = STST_DISPLAY_FLOOR
            break
        case STST_GAME_OVER
            goto mode main()
            : preserves
        case STST_SUCCESS
            _floor += 1
            if (_floor & %11 == 1)
                stage_state = STST_LEVEL_UP
                break
            // fall-through
        case STST_FAILURE
            if _lives == 0
                stage_state = STST_GAME_OVER
            else
                stage_state = STST_DISPLAY_FLOOR
            break
        case STST_DISPLAY_FLOOR
            stage_state = STST_INSTRUCTIONS
            break
        case STST_LEVEL_UP
            _level += 1
            if _floor & %111 == 1 && _difficulty < HARD
                _difficulty += 1
            stage_state = STST_DISPLAY_FLOOR
            break
        case STST_INSTRUCTIONS
            // Fade out:
            fade_out_black(FADE_PERIOD)

            // Prepare the PPU/mapper state:
            {PPUCTRL}(0)
            {PPUMASK}(0)
            state(0)

            _frames_left = MICROGAME_FRAMES
            winning = false

            // Enter the microgame:
            microgames[_microgame].entry_point()
        
fn _load_instructions(U microgame)
    stage_instructions_index = randb(microgames[microgame].instructions_num)
    
    // Grab the string:
    CCC/instructions ptr = microgames[microgame].instructions + stage_instructions_index*sizeof CCC/strings
    _upload_string = read CCC/strings(ptr)

    // Calculate the width:
    U width = 0
    while _upload_string[width] != charmap.sentinel
        width += 1

    // Calculate the PPUADDR:
    fence
    _upload_string_ppuaddr = $2000 + 14*32 + UU((32 - width) >> 1)
    fence

fn _select_microgame()
    do for U i = 0; i < 8; i += 1
        // Randomly choose a microgame:
        _microgame = randb(len(microgames))
        
        // Check to see if it was recently used:
        do for U j = i; j < 8; j += 1
            if _prev_microgames[(_prev_microgames_i + j) & %111] == _microgame
                goto retry

        break
        label retry

    _prev_microgames[_prev_microgames_i] = _microgame
    _prev_microgames_i += 1
    _prev_microgames_i &= %111

fn _handle_paused()
: -inline
    if pads[0].pressed & BUTTON_START
        paused = !paused
        puf.play_sfx(puf_sfx_select)
        if paused
            _palette_copy = palette
            palette[PALETTE_BG+0] = $20
            palette[PALETTE_BG+1] = $20
            palette[PALETTE_BG+2] = $20
            palette[PALETTE_UBC] = $0F
        else
            palette = _palette_copy

fn paused_nmi()
: -inline
    state(GTROM_CHR_BANK | GTROM_NT_BANK)
    ppu_reset_scroll(0, 0)
    {PPUCTRL}(PPUCTRL_NMI_ON | PPUCTRL_NT_2C00 | PPUCTRL_BG_PT_1000)
    {PPUMASK}(PPUMASK_BG_ON | PPUMASK_NO_CLIP)

// Gets called once per frame before the microgame's '_update' call.
fn pre_tick()
: -inline
    update_pads()
    _handle_paused()

// Gets called once per frame following the microgame's '_update' call.
fn post_tick()
: -inline
    _frames_left -= 1
    if _frames_left == 0
        fade_out_black(FADE_PERIOD_SLOW)
        U new_state = STST_FAILURE
        if winning
            new_state = STST_SUCCESS
        goto mode stage_screen(new_state)
        : preserves /stage

// Called when a stage begins.
fn stage_prep()
: -inline
    {PPUCTRL}(0)
    {PPUMASK}(0)
    state(GTROM_CHR_BANK | GTROM_NT_BANK)
    ppu_reset_addr($2C00)
    ppu_upload_fill($00, 1024)
    ct U length = len("Paused")-1
    ppu_set_addr($2C00 + 14*32 + UU((32 - length) >> 1))
    for U i = 0; i < length; i += 1
        {PPUDATA}(@"Paused"[i])

